/**
 * @file Firestore Security Rules
 * @core_philosophy This ruleset prioritizes security and data ownership.
 *   It enforces a strict separation of concerns, where users can only
 *   access their own data, and certain collections are publicly readable
 *   but writable only by authorized users. Data structure validation is
 *   relaxed to allow for rapid prototyping and iteration, focusing on
 *   authorization and relational integrity checks.
 * @data_structure
 *   - /games/{gameId}: Stores the entire state for a single game instance.
 *   - /tasks/{taskId}: Stores all defined tasks for the application.
 *   - /settings/{settingsId}: Stores global settings for the team.
 *   - /competitor_log/{logId}: Stores a timeline of competitor analysis notes.
 *   - /users/{userId}: Stores the role profiles for the application.
 * @key_security_decisions
 *   - User listing is explicitly denied to protect user privacy.
 *   - Public read access is granted to `/games`, `/tasks`, `/settings`, and `/competitor_log`.
 *   - Owner-only write access is enforced on `/users/{userId}`.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants read access to all users and deny all writes.
     * @path /games/{gameId}
     * @allow (get, list): Any user can read game data.
     * @deny (create, update, delete): No user can create, update, or delete game data through direct client access.
     * @principle Allows public read access for game data. Write operations are blocked.
     */
    match /games/{gameId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Grants read access to all users and deny all writes.
     * @path /tasks/{taskId}
     * @allow (get, list): Any user can read task data.
     * @deny (create, update, delete): No user can create, update, or delete task data through direct client access.
     * @principle Allows public read access for task data. Write operations are blocked.
     */
    match /tasks/{taskId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Grants read access to all users and deny all writes.
     * @path /settings/{settingsId}
     * @allow (get, list): Any user can read team settings.
     * @deny (create, update, delete): No user can create, update, or delete team settings through direct client access.
     * @principle Allows public read access for team settings. Write operations are blocked.
     */
    match /settings/{settingsId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Grants read access to all users and deny all writes.
     * @path /competitor_log/{logId}
     * @allow (get, list): Any user can read competitor log entries.
     * @deny (create, update, delete): No user can create, update, or delete competitor log entries through direct client access.
     * @principle Allows public read access for competitor log entries. Write operations are blocked.
     */
    match /competitor_log/{logId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Enforces user-specific data access for user profiles.
     * @path /users/{userId}
     * @allow (get): Allows a user to read their own profile.
     * @allow (create): Allows a user to create their own profile if the userId matches their auth UID.
     * @allow (update): Allows a user to update their own profile if the userId matches their auth UID and the document exists.
     * @allow (delete): Allows a user to delete their own profile if the userId matches their auth UID and the document exists.
     * @deny (list): Prevents listing of all user profiles for privacy.
     * @deny (create, update, delete): Denies a user from creating, updating, or deleting another user's profile.
     * @principle Enforces strict user ownership for profile data.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    // ---- Helper functions ----

    /**
     * @description Checks if the request is made by the owner of the resource.
     * @param {string} userId - The user ID to compare with the request's authentication UID.
     * @returns {boolean} - True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is signed in.
     * @returns {boolean} - True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the request is made by the owner of the resource and it exists.
     * @param {string} userId - The user ID to compare with the request's authentication UID.
     * @returns {boolean} - True if the user is the owner and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }
  }
}