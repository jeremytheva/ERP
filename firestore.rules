/**
 * @fileoverview Firestore Security Rules for ERPsim Dashboard.
 *
 * Core Philosophy:
 * This ruleset prioritizes security by default, restricting access unless explicitly allowed.
 * It uses simple authentication checks and avoids complex data validation to enable rapid prototyping.
 *
 * Data Structure:
 * - /games/{gameId}: Stores game state data. Public read-only.
 * - /tasks/{taskId}: Stores task definitions. Public read-only.
 * - /settings/{settingsId}: Stores team settings. Public read-only.
 * - /competitor_log/{logId}: Stores competitor log entries. Public read-only.
 * - /users/{userId}: Stores user profile information. Public read-only.
 *
 * Key Security Decisions:
 * - Public Read-Only: /games, /tasks, /settings, and /competitor_log collections are publicly readable.
 * - User Listing Denied: Listing of /users is explicitly denied to protect user privacy.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Authentication.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the request is made by the owner of the resource.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Ownership.
     */
    function isOwner(userId) {
        return request.auth.uid == userId;
    }

    /**
     * @description Checks if the request is made by the owner of an existing resource.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Ownership and existence check.
     */
    function isExistingOwner(userId) {
        return resource.data.userId == request.auth.uid;
    }

    /**
     * @description Rules for the /games collection.
     * @path /games/{gameId}
     * @allow (get, list): Any user can read game data.
     * @deny (create, update, delete): No user can create, update, or delete game data.
     * @principle Public read-only for game data.
     */
    match /games/{gameId} {
      allow get, list: if true;
    }

    /**
     * @description Rules for the /tasks collection.
     * @path /tasks/{taskId}
     * @allow (get, list): Any user can read task data.
     * @deny (create, update, delete): No user can create, update, or delete task data.
     * @principle Public read-only for task data.
     */
    match /tasks/{taskId} {
      allow get, list: if true;
    }

    /**
     * @description Rules for the /settings collection.
     * @path /settings/{settingsId}
     * @allow (get, list): Any user can read settings data.
     * @deny (create, update, delete): No user can create, update, or delete settings data.
     * @principle Public read-only for settings data.
     */
    match /settings/{settingsId} {
      allow get, list: if true;
    }

    /**
     * @description Rules for the /competitor_log collection.
     * @path /competitor_log/{logId}
     * @allow (get, list): Any user can read competitor log data.
     * @deny (create, update, delete): No user can create, update, or delete competitor log data.
     * @principle Public read-only for competitor log data.
     */
    match /competitor_log/{logId} {
      allow get, list: if true;
    }

    /**
     * @description Rules for the /users collection.
     * @path /users/{userId}
     * @allow (get): Any user can read a specific user profile.
     * @allow (create): A user can create their own profile if the userId matches their auth UID.
     * @allow (update, delete): A user can update or delete their own profile.
     * @deny (list): No user can list all user profiles.
     * @deny (create, update, delete): A user cannot modify another user's profile.
     * @principle Owner-only access for writes to user profiles; listing is disabled for privacy.
     */
    match /users/{userId} {
      allow get: if true;
      allow list: if false; // Prevent listing of all users.
      allow create: if request.auth.uid == userId;
      allow update, delete: if request.auth.uid == userId;
    }
  }
}