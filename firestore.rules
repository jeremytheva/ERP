/**
 * @file Firestore Security Rules
 * @description This ruleset is in PROTOTYPING mode. It prioritizes strict authorization over data validation,
 *              allowing for rapid schema iteration.
 *
 * Core Philosophy:
 *   - All data access is predicated on verified user identity (request.auth != null).
 *   - Data validation is minimized to accelerate development. Focus is on ownership and access control.
 *   - Write operations are ALWAYS protected by an authorization check. NEVER allow `if true;`.
 *
 * Data Structure:
 *   - Top-level collections: /games/{gameId}, /tasks/{taskId}, /settings/{settingsId}, /competitor_log/{logId}.
 *   - There are no user-specific data trees.
 *
 * Key Security Decisions:
 *   - Listing all documents in the database is generally disallowed unless explicitly stated.
 *   - The rules do not enforce the exact schema of the data being written, only authorization.
 *
 *
 * Access Control Patterns:
 *   - /games/{gameId}: Public Read with Owner-Only Writes (assuming a field exists for ownership)
 *   - /tasks/{taskId}: Public Read with Owner-Only Writes (assuming a field exists for ownership)
 *   - /settings/{settingsId}: Public Read with Owner-Only Writes (assuming a field exists for ownership)
 *   - /competitor_log/{logId}: Public Read with Owner-Only Writes (assuming a field exists for ownership)
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to game state documents.
     * @path /games/{gameId}
     * @allow (get, list): Any user can read game state.
     * @allow (create): Only the authenticated user who 'owns' the game document can create it, and must set the `ownerId` field to their UID.
     * @allow (update, delete): Only the authenticated user who 'owns' the game document can modify or delete it.
     * @deny (create): An unauthenticated user cannot create a game state document.
     * @deny (update): A user cannot update a game they don't own.
     * @deny (delete): A user cannot delete a game they don't own.
     * @principle Public Read with Owner-Only Writes.  Enforces ownership for data modification.
     */
    match /games/{gameId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.ownerId == request.auth.uid; // Initial owner assignment.
      allow update: if isSignedIn() && isExistingOwner(resource.data.ownerId);
      allow delete: if isSignedIn() && isExistingOwner(resource.data.ownerId);
    }

    /**
     * @description Controls access to task documents.
     * @path /tasks/{taskId}
     * @allow (get, list): Any user can read tasks.
     * @allow (create): Only the authenticated user who 'owns' the task document can create it, and must set the `ownerId` field to their UID.
     * @allow (update, delete): Only the authenticated user who 'owns' the task document can modify or delete it.
     * @deny (create): An unauthenticated user cannot create a task document.
     * @deny (update): A user cannot update a task they don't own.
     * @deny (delete): A user cannot delete a task they don't own.
     * @principle Public Read with Owner-Only Writes.  Enforces ownership for data modification.
     */
    match /tasks/{taskId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.ownerId == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwner(resource.data.ownerId);
      allow delete: if isSignedIn() && isExistingOwner(resource.data.ownerId);
    }

    /**
     * @description Controls access to team settings documents.
     * @path /settings/{settingsId}
     * @allow (get, list): Any user can read team settings.
     * @allow (create): Only the authenticated user who 'owns' the settings document can create it, and must set the `ownerId` field to their UID.
     * @allow (update, delete): Only the authenticated user who 'owns' the settings document can modify or delete it.
     * @deny (create): An unauthenticated user cannot create a settings document.
     * @deny (update): A user cannot update settings they don't own.
     * @deny (delete): A user cannot delete settings they don't own.
     * @principle Public Read with Owner-Only Writes.  Enforces ownership for data modification.
     */
    match /settings/{settingsId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.ownerId == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwner(resource.data.ownerId);
      allow delete: if isSignedIn() && isExistingOwner(resource.data.ownerId);
    }

    /**
     * @description Controls access to competitor log entry documents.
     * @path /competitor_log/{logId}
     * @allow (get, list): Any user can read competitor log entries.
     * @allow (create): Only the authenticated user who 'owns' the log entry document can create it, and must set the `authorId` field to their UID.
     * @allow (update, delete): Only the authenticated user who 'owns' the log entry document can modify or delete it.
     * @deny (create): An unauthenticated user cannot create a log entry document.
     * @deny (update): A user cannot update a log entry they don't own.
     * @deny (delete): A user cannot delete a log entry they don't own.
     * @principle Public Read with Owner-Only Writes.  Enforces ownership for data modification.
     */
    match /competitor_log/{logId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwner(resource.data.author);
      allow delete: if isSignedIn() && isExistingOwner(resource.data.author);
    }

    // Helper Functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }
  }
}