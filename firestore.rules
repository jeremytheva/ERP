/**
 * @file Firestore Security Rules
 * @description This ruleset is in prototyping mode to enable rapid development. It prioritizes
 *   strong authorization and minimal data validation to allow for schema flexibility during
 *   initial development.
 *
 * Core Philosophy:
 *   - Public Read, Owner-Only Write. Most top-level collections are readable by anyone,
 *     but only the owner (creator) can modify data.
 *
 * Data Structure:
 *   - Top-level collections: `/games`, `/tasks`, `/settings`, `/competitor_log`, `/users`.
 *
 * Key Security Decisions:
 *   - User listing is explicitly denied.
 *   - All write operations require user authentication.
 *   - Data validation is minimal, focusing on ownership checks and preventing modification
 *     of key relationship fields.
 *
 * Denormalization for Authorization:
 *   - The `id` field on the UserProfile document is used for fast ownership checks in the `/users/{userId}` path.
 *
 * Structural Segregation:
 *   - No separation of public/private data within a single collection.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows read-only access to user profiles, but prohibits listing all profiles.
     * @path /databases/{database}/documents/users/{userId}
     * @allow (get) Authenticated user can read any user profile.
     * @deny (list) All users are denied listing all user profiles.
     * @principle Restricts listing of user profiles. Allows public read of individual profiles.
     */
    match /users/{userId} {
      allow get: if true;
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows public read access to game states, but restricts modifications to owners.
     * @path /databases/{database}/documents/games/{gameId}
     * @allow (get, list) Any user can read the game state.
     * @allow (create) Authenticated user can create a game state, if they are the owner.
     * @allow (update, delete) The user can update or delete a game state if they are the owner and the document exists.
     * @deny (create) An unauthenticated user cannot create a game state.
     * @deny (update, delete) A non-owner cannot update or delete the game state.
     * @principle Enforces document ownership for writes.
     */
    match /games/{gameId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Allows public read access to tasks, but restricts modifications to owners.
     * @path /databases/{database}/documents/tasks/{taskId}
     * @allow (get, list) Any user can read the task.
     * @allow (create) Authenticated user can create a task.
     * @allow (update, delete) The user can update or delete a task if they are the owner and the document exists.
     * @deny (create) An unauthenticated user cannot create a task.
     * @deny (update, delete) A non-owner cannot update or delete the task.
     * @principle Enforces document ownership for writes.
     */
    match /tasks/{taskId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Allows public read access to settings, but restricts modifications to owners.
     * @path /databases/{database}/documents/settings/{settingsId}
     * @allow (get, list) Any user can read the settings.
     * @allow (create) Authenticated user can create settings.
     * @allow (update, delete) The user can update or delete settings if they are the owner and the document exists.
     * @deny (create) An unauthenticated user cannot create settings.
     * @deny (update, delete) A non-owner cannot update or delete the settings.
     * @principle Enforces document ownership for writes.
     */
    match /settings/{settingsId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Allows public read access to competitor log entries, but restricts modifications to owners.
     * @path /databases/{database}/documents/competitor_log/{logId}
     * @allow (get, list) Any user can read the competitor log entries.
     * @allow (create) Authenticated user can create a competitor log entry.
     * @allow (update, delete) The user can update or delete a competitor log entry if they are the owner and the document exists.
     * @deny (create) An unauthenticated user cannot create a competitor log entry.
     * @deny (update, delete) A non-owner cannot update or delete the competitor log entry.
     * @principle Enforces document ownership for writes.
     */
    match /competitor_log/{logId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Checks if the user is signed in
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user ID matches the requested ID.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the user ID matches the requested ID and the resource exists
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }
  }
}