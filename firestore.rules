/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a public read with owner-restricted write model for all data.
 * All collections are publicly readable, but write access (create, update, delete) is restricted to the owner.
 * There is no user-specific data or subcollections. Therefore, the rules focus on validating ownership on write operations.
 * Data Structure: Top-level collections for games, tasks, settings, and competitor logs. No user-specific data.
 * Key Security Decisions: Public read access is granted for all collections to facilitate open data consumption.
 *  Write operations are strictly controlled by requiring an ownership field to match the authenticated user's UID.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows anyone to read game state data, but restricts modifications to the owner.
     * @path /games/{gameId}
     * @allow (get, list)
     * @allow (create) if request.auth.uid != null
     * @allow (update, delete) if request.auth.uid != null
     * @deny (create, update, delete) if request.auth.uid == null
     * @principle Public read, owner-only write.
     */
    match /games/{gameId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if isSignedIn();
    }

    /**
     * @description Allows anyone to read task data, but restricts modifications to the owner.
     * @path /tasks/{taskId}
     * @allow (get, list)
     * @allow (create) if request.auth.uid != null
     * @allow (update, delete) if request.auth.uid != null
     * @deny (create, update, delete) if request.auth.uid == null
     * @principle Public read, owner-only write.
     */
    match /tasks/{taskId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if isSignedIn();
    }

    /**
     * @description Allows anyone to read team settings, but restricts modifications to the owner.
     * @path /settings/{settingsId}
     * @allow (get, list)
     * @allow (create) if request.auth.uid != null
     * @allow (update, delete) if request.auth.uid != null
     * @deny (create, update, delete) if request.auth.uid == null
     * @principle Public read, owner-only write.
     */
    match /settings/{settingsId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if isSignedIn();
    }

    /**
     * @description Allows anyone to read competitor log entries, but restricts modifications to the owner.
     * @path /competitor_log/{logId}
     * @allow (get, list)
     * @allow (create) if request.auth.uid != null
     * @allow (update, delete) if request.auth.uid != null
     * @deny (create, update, delete) if request.auth.uid == null
     * @principle Public read, owner-only write.
     */
    match /competitor_log/{logId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if isSignedIn();
    }

    // Helper function to determine if the user is signed in
    function isSignedIn() {
      return request.auth != null;
    }
  }
}