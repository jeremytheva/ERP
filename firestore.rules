/**
 * @fileoverview Firestore Security Rules for ERPsim Dashboard.
 *
 * Core Philosophy:
 * This ruleset prioritizes security and data access control, especially around
 * user data. In prototyping mode, it focuses on authorization and skips
 * extensive data validation to allow for rapid iteration.
 *
 * Data Structure:
 * - /games/{gameId}: Stores the state of each game. Publicly readable, writes restricted.
 * - /tasks/{taskId}: Stores all defined tasks. Publicly readable, writes restricted.
 * - /settings/{settingsId}: Stores team settings. Publicly readable, writes restricted.
 * - /competitor_log/{logId}: Stores competitor log entries. Publicly readable, writes restricted.
 * - /users/{userId}: Stores user profile information.
 *
 * Key Security Decisions:
 * - Listing the /users collection is explicitly denied due to privacy concerns.
 * - All write operations are secured.
 * - No schema validation is performed beyond authorization checks.
 *
 * Denormalization for Authorization: N/A in this version.
 * Structural Segregation: N/A in this version.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows read access to all users, but restricts write access.
     * @path /games/{gameId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Allows public read access but restricts writes.
     */
    match /games/{gameId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows read access to all users, but restricts write access.
     * @path /tasks/{taskId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Allows public read access but restricts writes.
     */
    match /tasks/{taskId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows read access to all users, but restricts write access.
     * @path /settings/{settingsId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Allows public read access but restricts writes.
     */
    match /settings/{settingsId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows read access to all users, but restricts write access.
     * @path /competitor_log/{logId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Allows public read access but restricts writes.
     */
    match /competitor_log/{logId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Controls access to user profile documents.  Only the owner (user themselves) can read their own profile. Listing is denied.
     * @path /users/{userId}
     * @allow get: if isOwner(userId);
     * @allow create: if isOwner(userId);
     * @allow update: if isExistingOwner(userId);
     * @allow delete: if isExistingOwner(userId);
     * @deny list: if false;
     * @allow create: if request.auth.uid == userId;
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * Helper functions.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }
  }
}